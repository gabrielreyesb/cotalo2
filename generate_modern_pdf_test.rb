#!/usr/bin/env ruby

# Script para generar el PDF moderno y probar el logo en la esquina superior derecha
require_relative 'config/environment'

puts "=== GENERADOR DE PDF MODERNO ==="

# Buscar un usuario con PDF config
user = User.includes(:pdf_config).first
if user.nil?
  puts "‚ùå No se encontr√≥ ning√∫n usuario"
  exit 1
end

puts "üë§ Usuario: #{user.email}"
puts "üìã PDF Config ID: #{user.pdf_config&.id}"
puts "üñºÔ∏è  Logo URL: #{user.pdf_config&.logo_url}"

# Buscar una cotizaci√≥n existente o crear una nueva
quote = user.quotes.includes(:quote_products => [:product]).first

if quote.nil?
  puts "‚ùå No se encontr√≥ ninguna cotizaci√≥n"
  exit 1
end

puts "üìÑ Cotizaci√≥n: #{quote.quote_number}"
puts "üì¶ Productos: #{quote.quote_products.count}"

# Generar PDF moderno
puts "\n=== GENERANDO PDF MODERNO ==="
begin
  pdf_generator = QuotePdfGeneratorModern.new(quote)
  pdf_content = pdf_generator.generate
  
  # Guardar el PDF
  filename = "test_modern_pdf_#{Time.current.strftime('%Y%m%d_%H%M%S')}.pdf"
  File.binwrite(filename, pdf_content)
  
  puts "‚úÖ PDF moderno generado exitosamente: #{filename}"
  puts "üìè Tama√±o del archivo: #{pdf_content.bytesize} bytes"
  
  # Verificar que el archivo se cre√≥ correctamente
  if File.exist?(filename) && File.size(filename) > 0
    puts "‚úÖ Archivo guardado correctamente"
    puts "üìÅ Ruta completa: #{File.expand_path(filename)}"
  else
    puts "‚ùå Error al guardar el archivo"
  end
  
rescue => e
  puts "‚ùå Error generando PDF moderno: #{e.message}"
  puts e.backtrace.join("\n")
  exit 1
end

puts "\n=== COMPLETADO ==="
puts "Abre el archivo #{filename} para verificar que el logo aparece en la esquina superior derecha" 