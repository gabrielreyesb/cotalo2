// Product Form V3 - Single Page Progressive Form JavaScript

console.log('🚀 Product Form V3 script loaded!');

// Global initialization function
function initializeV3Form() {
  console.log('🚀 Initializing V3 form...');
  const form = document.getElementById('product-form-v3');
  
  if (!form) {
    console.log('❌ V3 form not found on this page');
    return;
  }
  
  console.log('✅ Form found, starting initialization...');
  
  // Initialize form state and load data
  console.log('📊 Setting up form state...');
  updateProgressIndicator();
  bindEventListeners();
  
  console.log('📡 Loading initial data...');
  loadMaterials();
  loadManufacturingProcesses();
  loadExtras();
  
  console.log('🎯 V3 Form initialization complete!');
}

// Initialize after page loads
setTimeout(() => {
  initializeV3Form();
}, 1000);

// State management for V3 (5 steps instead of 6)
const formState = {
    currentStep: 1,
    totalSteps: 5,
    sectionsCompleted: [],
    productData: {
      general_info: {},
      materials_with_processes: [], // New structure: materials with their processes
      global_processes: [],          // Global processes (was just "processes")
      extras: [],
      pricing: {}
    }
};

// Core functions for V3 form
function updateProgressIndicator() {
  // Update progress bar and step indicators
  const progressBar = document.getElementById('progress-bar');
  const currentStepSpan = document.getElementById('current-step');
  const stepIndicators = document.querySelectorAll('.step-indicator');
  
  if (progressBar && currentStepSpan) {
    const progressPercent = (formState.currentStep / formState.totalSteps) * 100;
    progressBar.style.width = progressPercent + '%';
    currentStepSpan.textContent = formState.currentStep;
  }
  
  // Update step indicators
  stepIndicators.forEach((indicator, index) => {
    const stepNumber = index + 1;
    if (stepNumber <= formState.currentStep) {
      indicator.classList.add('active');
    } else {
      indicator.classList.remove('active');
    }
  });
}

function bindEventListeners() {
  // Bind material addition
  const addMaterialBtn = document.getElementById('add-material-btn');
  if (addMaterialBtn) {
    addMaterialBtn.addEventListener('click', addMaterialWithProcesses);
  }
  
  console.log('✅ Event listeners bound');
}

function initializeForm() {
    console.log('🚀 Initializing V3 form...');
    
    try {
      console.log('📍 Step 1: Setting active section...');
      // Set initial active section
      setActiveSection(1);
      console.log('✅ Active section set');
      
      console.log('📍 Step 2: Binding navigation events...');
      // Bind navigation events
      bindNavigationEvents();
      console.log('✅ Navigation events bound');
      
      console.log('📍 Step 3: Binding form events...');
      // Bind form events
      bindFormEvents();
      console.log('✅ Form events bound');
      
      console.log('📍 Step 4: Loading initial data...');
      // Load initial data
      loadInitialData();
      console.log('✅ Initial data loading started');
      
      console.log('🎉 Form initialized successfully');
    } catch (error) {
      console.error('❌ Error in initializeForm:', error);
      console.error('Stack:', error.stack);
    }
  }
  
  function setActiveSection(stepNumber) {
    // Update state
    formState.currentStep = stepNumber;
    
    // Update progress bar
    updateProgressBar();
    
    // Update step indicators
    updateStepIndicators();
    
    // Update sections
    updateSections();
    
    // Scroll to section
    scrollToSection(stepNumber);
  }
  
  function updateProgressBar() {
    const progressBar = document.getElementById('progress-bar');
    const currentStepSpan = document.getElementById('current-step');
    
    if (progressBar && currentStepSpan) {
      const progressPercent = (formState.currentStep / formState.totalSteps) * 100;
      progressBar.style.width = progressPercent + '%';
      currentStepSpan.textContent = formState.currentStep;
    }
  }
  
  function updateStepIndicators() {
    const indicators = document.querySelectorAll('.step-indicator');
    
    indicators.forEach((indicator, index) => {
      const stepNumber = index + 1;
      
      // Remove all classes
      indicator.classList.remove('active', 'completed');
      
      // Add appropriate class
      if (stepNumber === formState.currentStep) {
        indicator.classList.add('active');
      } else if (formState.sectionsCompleted.includes(stepNumber)) {
        indicator.classList.add('completed');
      }
    });
  }
  
  function updateSections() {
    const sections = document.querySelectorAll('.form-section');
    
    sections.forEach((section, index) => {
      const stepNumber = index + 1;
      
      // Remove all classes
      section.classList.remove('active', 'completed', 'expanded');
      
      // Add appropriate class
      if (stepNumber === formState.currentStep) {
        section.classList.add('active');
      } else if (formState.sectionsCompleted.includes(stepNumber)) {
        section.classList.add('completed');
      }
    });
  }
  
  function scrollToSection(stepNumber) {
    const section = document.getElementById(`section-${stepNumber}`);
    if (section) {
      // Scroll with offset for sticky elements
      const yOffset = -180; 
      const y = section.getBoundingClientRect().top + window.pageYOffset + yOffset;
      
      window.scrollTo({
        top: y,
        behavior: 'smooth'
      });
    }
  }
  
  function bindNavigationEvents() {
    // Next button events
    document.querySelectorAll('.next-section').forEach(button => {
      button.addEventListener('click', function() {
        const nextStep = parseInt(this.dataset.next);
        
        // Validate current section before moving
        if (validateCurrentSection()) {
          markSectionAsCompleted(formState.currentStep);
          setActiveSection(nextStep);
        }
      });
    });
    
    // Previous button events
    document.querySelectorAll('.prev-section').forEach(button => {
      button.addEventListener('click', function() {
        const prevStep = parseInt(this.dataset.prev);
        setActiveSection(prevStep);
      });
    });
    
    // Section header clicks (for completed sections)
    document.querySelectorAll('.section-header').forEach(header => {
      header.addEventListener('click', function() {
        const section = this.closest('.form-section');
        const stepNumber = parseInt(section.dataset.step);
        
        // If section is completed, allow expanding/collapsing
        if (formState.sectionsCompleted.includes(stepNumber)) {
          section.classList.toggle('expanded');
        }
        // If it's not completed but accessible, navigate to it
        else if (stepNumber <= formState.currentStep) {
          setActiveSection(stepNumber);
        }
      });
    });
  }
  
  function bindFormEvents() {
    // General info fields
    document.querySelectorAll('[data-field]').forEach(field => {
      field.addEventListener('input', function() {
        const fieldName = this.dataset.field;
        const value = this.value;
        
        // Update state
        formState.productData.general_info[fieldName] = value;
        
        // Update calculations if needed
        updateCalculations();
        
        console.log('Updated general info:', fieldName, value);
      });
    });
    
    // Save button
    const saveButton = document.getElementById('save-product-v3');
    if (saveButton) {
      saveButton.addEventListener('click', saveProduct);
    }
    
    // Add material button
    const addMaterialBtn = document.getElementById('add-material-btn');
    if (addMaterialBtn) {
      addMaterialBtn.addEventListener('click', addMaterialWithProcesses);
    }
  }
  
  function validateCurrentSection() {
    const currentSection = document.getElementById(`section-${formState.currentStep}`);
    
    switch(formState.currentStep) {
      case 1:
        return validateGeneralInfo();
      case 2:
        return validateMaterialsWithProcesses(); // New: combined validation
      case 3:
        return validateGlobalProcesses();
      case 4:
        return validateExtras();
      case 5:
        return validateFinalCalculation();
      default:
        return true;
    }
  }
  
  function validateGeneralInfo() {
    const requiredFields = ['description', 'quantity', 'width', 'length'];
    let isValid = true;
    
    requiredFields.forEach(fieldName => {
      const field = document.querySelector(`[name="${fieldName}"], [data-field="${fieldName}"]`);
      if (field) {
        const value = field.value.trim();
        
        if (!value || (fieldName !== 'description' && parseFloat(value) <= 0)) {
          field.classList.add('is-invalid');
          field.classList.remove('is-valid');
          isValid = false;
        } else {
          field.classList.add('is-valid');
          field.classList.remove('is-invalid');
        }
      }
    });
    
    if (!isValid) {
      showValidationMessage('Por favor completa todos los campos obligatorios correctamente.');
    }
    
    return isValid;
  }
  
  function validateMaterialsWithProcesses() {
    // New validation: materials with their processes combined
    // For now, materials are optional but if added, they should have at least one process
    const materialCards = document.querySelectorAll('.material-card');
    
    for (let card of materialCards) {
      const selectedProcesses = card.querySelectorAll('input[type="checkbox"]:checked');
      if (selectedProcesses.length === 0) {
        showValidationMessage('Cada material debe tener al menos un proceso seleccionado.');
        return false;
      }
    }
    
    return true;
  }
  
  function validateGlobalProcesses() {
    // For now, global processes are optional
    return true;
  }
  
  function validateExtras() {
    // For now, extras are optional
    return true;
  }
  
  function validateFinalCalculation() {
    // Final calculation is always valid since it's automatic
    return true;
  }
  
  function markSectionAsCompleted(stepNumber) {
    if (!formState.sectionsCompleted.includes(stepNumber)) {
      formState.sectionsCompleted.push(stepNumber);
    }
    
    // Update section visual state
    const section = document.getElementById(`section-${stepNumber}`);
    if (section) {
      // Update status icon
      const pendingIcon = section.querySelector('.pending-icon');
      const completedIcon = section.querySelector('.completed-icon');
      
      if (pendingIcon) pendingIcon.classList.add('d-none');
      if (completedIcon) completedIcon.classList.remove('d-none');
    }
  }
  
  function updateCalculations() {
    // Calculate materials cost
    const materialsCost = formState.productData.materials.reduce((sum, material) => {
      return sum + (parseFloat(material.subtotal_price) || 0);
    }, 0);
    
    // Calculate processes cost
    const processesCost = formState.productData.processes.reduce((sum, process) => {
      return sum + (parseFloat(process.subtotal_price) || 0);
    }, 0);
    
    // Calculate extras cost
    const extrasCost = formState.productData.extras.reduce((sum, extra) => {
      return sum + (parseFloat(extra.subtotal_price) || 0);
    }, 0);
    
    // Calculate total
    const totalCost = materialsCost + processesCost + extrasCost;
    
    // Update UI
    updateCostDisplay('materials-cost', materialsCost);
    updateCostDisplay('processes-cost', processesCost);
    updateCostDisplay('extras-cost', extrasCost);
    updateCostDisplay('total-cost', totalCost);
    
    // Update final pricing section
    updateCostDisplay('final-materials-cost', materialsCost);
    updateCostDisplay('final-processes-cost', processesCost);
    updateCostDisplay('final-extras-cost', extrasCost);
    updateCostDisplay('final-subtotal', totalCost);
    
    // Calculate waste and margin
    const wastePercent = 10; // Default, should come from user config
    const marginPercent = 30; // Default, should come from user config
    
    const wasteValue = totalCost * (wastePercent / 100);
    const subtotalWithWaste = totalCost + wasteValue;
    const marginValue = subtotalWithWaste * (marginPercent / 100);
    const finalTotal = subtotalWithWaste + marginValue;
    
    const quantity = parseInt(formState.productData.general_info.quantity) || 1;
    const pricePerPiece = finalTotal / quantity;
    
    updateCostDisplay('final-waste', wasteValue);
    updateCostDisplay('final-margin', marginValue);
    updateCostDisplay('final-total-price', finalTotal);
    updateCostDisplay('final-price-per-piece', pricePerPiece);
  }
  
  function updateCostDisplay(elementId, amount) {
    const element = document.getElementById(elementId);
    if (element) {
      element.textContent = formatCurrency(amount);
    }
  }
  
  function formatCurrency(amount) {
    return new Intl.NumberFormat('es-MX', {
      style: 'currency',
      currency: 'MXN'
    }).format(amount || 0);
  }
  
  function loadInitialData() {
    console.log('Loading initial data...');
    console.log('About to load materials...');
    
    // Load materials for the dropdown
    loadMaterials();
    
    console.log('About to load manufacturing processes...');
    // Load manufacturing processes (will be used when materials are added)
    loadManufacturingProcesses();
    
    console.log('About to load extras...');
    // Load extras/indirect costs
    loadExtras();
  }
  
  function loadMaterials() {
    console.log('🔄 Starting to load materials...');
    
    // Clear any existing options first
    const materialSelect = document.getElementById('material-select');
    if (materialSelect) {
      materialSelect.innerHTML = '<option value="">Elige un material...</option>';
    }
    
    // Load from API
    fetch('/api/v1/materials', {
      method: 'GET',
      credentials: 'same-origin',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })
      .then(response => {
        console.log('📡 Materials response status:', response.status);
        console.log('📡 Response headers:', response.headers);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(materials => {
        console.log('✅ Materials loaded from API:', materials);
        if (materials && materials.length > 0) {
          populateMaterialSelect(materials);
          // Store materials for later use
          formState.availableMaterials = materials;
        } else {
          console.warn('⚠️ No materials returned from API');
        }
      })
      .catch(error => {
        console.error('❌ Error loading materials:', error);
        console.error('Error details:', error.message);
        showValidationMessage('Error al cargar materiales. Por favor recarga la página.');
      });
  }
  
  function loadManufacturingProcesses() {
    fetch('/api/v1/manufacturing_processes', {
      method: 'GET',
      credentials: 'same-origin',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })
      .then(response => {
        console.log('Processes response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(processes => {
        console.log('Manufacturing processes loaded:', processes);
        // Store processes for when materials are added
        formState.availableProcesses = processes;
      })
      .catch(error => {
        console.error('Error loading manufacturing processes:', error);
        showValidationMessage('Error al cargar procesos. Por favor recarga la página.');
      });
  }
  
  function loadExtras() {
    fetch('/api/v1/indirect_costs', {
      method: 'GET',
      credentials: 'same-origin',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    })
      .then(response => {
        console.log('Extras response status:', response.status);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(extras => {
        console.log('Extras loaded:', extras);
        // Store extras for section 4
        formState.availableExtras = extras;
      })
      .catch(error => {
        console.error('Error loading extras:', error);
        showValidationMessage('Error al cargar extras. Por favor recarga la página.');
      });
  }
  
  function populateMaterialSelect(materials) {
    console.log('Populating material select with:', materials.length, 'materials');
    
    const materialSelect = document.getElementById('material-select');
    console.log('Material select element found:', !!materialSelect);
    
    if (!materialSelect) {
      console.error('Material select element not found!');
      return;
    }
    
    // Clear existing options except the first one
    materialSelect.innerHTML = '<option value="">Elige un material...</option>';
    
    // Add materials to dropdown
    materials.forEach((material, index) => {
      console.log(`Adding material ${index + 1}:`, material.description);
      const option = document.createElement('option');
      option.value = material.id;
      option.textContent = `${material.description} (${material.unit})`;
      option.dataset.material = JSON.stringify(material);
      materialSelect.appendChild(option);
    });
    
    console.log('Material select populated successfully. Total options:', materialSelect.options.length);
  }
  
  function addMaterialWithProcesses() {
    const materialSelect = document.getElementById('material-select');
    const selectedOption = materialSelect.options[materialSelect.selectedIndex];
    
    if (!selectedOption.value) {
      showValidationMessage('Por favor selecciona un material.');
      return;
    }
    
    // Get material data
    const materialData = JSON.parse(selectedOption.dataset.material);
    console.log('Adding material:', materialData);
    
    // Create material card with processes
    const materialCard = createMaterialCard(materialData);
    
    // Add to container
    const container = document.getElementById('materials-with-processes-list');
    if (container) {
      container.appendChild(materialCard);
    }
    
    // Add to state
    const materialWithProcesses = {
      material: materialData,
      selectedProcesses: [],
      quantity: 1
    };
    formState.productData.materials_with_processes.push(materialWithProcesses);
    
    // Reset dropdown
    materialSelect.selectedIndex = 0;
    
    // Update calculations
    updateCalculations();
    
    console.log('Material added successfully:', materialWithProcesses);
  }
  
  function createMaterialCard(material) {
    const card = document.createElement('div');
    card.className = 'material-card';
    card.dataset.materialId = material.id;
    
    card.innerHTML = `
      <div class="material-info">
        <h6>Material: ${material.description}</h6>
        <p>Precio: ${formatCurrency(material.price)} por ${material.unit}</p>
        <div class="row">
          <div class="col-md-6">
            <label class="form-label">Cantidad</label>
            <input type="number" class="form-control material-quantity" value="1" min="1" data-material-id="${material.id}">
          </div>
        </div>
      </div>
      <div class="material-processes">
        <h6>Procesos para este material:</h6>
        <div class="processes-selection">
          ${createProcessCheckboxes(material)}
        </div>
        <div class="mt-3">
          <button type="button" class="btn btn-sm btn-outline-danger remove-material" data-material-id="${material.id}">
            <i class="fas fa-trash me-1"></i> Eliminar Material
          </button>
        </div>
      </div>
    `;
    
    // Bind events for this card
    bindMaterialCardEvents(card);
    
    return card;
  }
  
  function createProcessCheckboxes(material) {
    if (!formState.availableProcesses || !formState.availableProcesses.length) {
      return '<p class="text-muted">Cargando procesos...</p>';
    }
    
    let checkboxesHTML = '';
    formState.availableProcesses.forEach(process => {
      const processId = `process-${material.id}-${process.id}`;
      checkboxesHTML += `
        <div class="form-check">
          <input type="checkbox" class="form-check-input process-checkbox" 
                 id="${processId}" 
                 data-material-id="${material.id}" 
                 data-process-id="${process.id}"
                 data-process-data='${JSON.stringify(process)}'>
          <label class="form-check-label" for="${processId}">
            ${process.description} - ${formatCurrency(process.price)} por ${process.unit}
          </label>
        </div>
      `;
    });
    
    return checkboxesHTML;
  }
  
  function bindMaterialCardEvents(card) {
    // Quantity change
    const quantityInput = card.querySelector('.material-quantity');
    if (quantityInput) {
      quantityInput.addEventListener('input', function() {
        updateMaterialQuantity(this.dataset.materialId, this.value);
      });
    }
    
    // Process checkboxes
    const processCheckboxes = card.querySelectorAll('.process-checkbox');
    processCheckboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        updateMaterialProcesses(this.dataset.materialId);
      });
    });
    
    // Remove material button
    const removeBtn = card.querySelector('.remove-material');
    if (removeBtn) {
      removeBtn.addEventListener('click', function() {
        removeMaterialCard(this.dataset.materialId);
      });
    }
  }
  
  function updateMaterialQuantity(materialId, quantity) {
    const materialIndex = formState.productData.materials_with_processes.findIndex(
      m => m.material.id == materialId
    );
    
    if (materialIndex !== -1) {
      formState.productData.materials_with_processes[materialIndex].quantity = parseInt(quantity) || 1;
      updateCalculations();
    }
  }
  
  function updateMaterialProcesses(materialId) {
    const materialIndex = formState.productData.materials_with_processes.findIndex(
      m => m.material.id == materialId
    );
    
    if (materialIndex === -1) return;
    
    // Get selected processes for this material
    const selectedProcesses = [];
    const checkboxes = document.querySelectorAll(`input[data-material-id="${materialId}"]:checked`);
    
    checkboxes.forEach(checkbox => {
      const processData = JSON.parse(checkbox.dataset.processData);
      selectedProcesses.push(processData);
    });
    
    formState.productData.materials_with_processes[materialIndex].selectedProcesses = selectedProcesses;
    updateCalculations();
    
    console.log('Updated processes for material', materialId, selectedProcesses);
  }
  
  function removeMaterialCard(materialId) {
    // Remove from DOM
    const card = document.querySelector(`.material-card[data-material-id="${materialId}"]`);
    if (card) {
      card.remove();
    }
    
    // Remove from state
    const materialIndex = formState.productData.materials_with_processes.findIndex(
      m => m.material.id == materialId
    );
    
    if (materialIndex !== -1) {
      formState.productData.materials_with_processes.splice(materialIndex, 1);
      updateCalculations();
    }
    
    console.log('Material removed:', materialId);
  }
  
  function saveProduct() {
    // Validate all sections
    let allValid = true;
    
    for (let step = 1; step <= formState.currentStep; step++) {
      const previousStep = formState.currentStep;
      formState.currentStep = step;
      
      if (!validateCurrentSection()) {
        allValid = false;
        setActiveSection(step);
        break;
      }
      
      formState.currentStep = previousStep;
    }
    
    if (!allValid) {
      showValidationMessage('Por favor completa todos los campos requeridos antes de guardar.');
      return;
    }
    
    // Prepare data for submission
    const productData = {
      description: document.querySelector('[name="description"]').value,
      data: formState.productData
    };
    
    // Update hidden field
    const hiddenField = document.getElementById('product-data');
    if (hiddenField) {
      hiddenField.value = JSON.stringify(formState.productData);
    }
    
    // Submit form
    const form = document.getElementById('product-form-v3');
    if (form) {
      // Show loading state
      showLoadingState();
      
      // Submit the form
      form.submit();
    }
  }
  
  function showValidationMessage(message) {
    // Create or update validation message
    let messageDiv = document.getElementById('validation-message');
    
    if (!messageDiv) {
      messageDiv = document.createElement('div');
      messageDiv.id = 'validation-message';
      messageDiv.className = 'alert alert-danger alert-dismissible fade show position-fixed';
      messageDiv.style.top = '20px';
      messageDiv.style.right = '20px';
      messageDiv.style.zIndex = '9999';
      messageDiv.style.maxWidth = '400px';
      
      messageDiv.innerHTML = `
        <i class="fas fa-exclamation-triangle me-2"></i>
        <span class="message-text">${message}</span>
        <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
      `;
      
      document.body.appendChild(messageDiv);
    } else {
      messageDiv.querySelector('.message-text').textContent = message;
    }
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      if (messageDiv && messageDiv.parentElement) {
        messageDiv.remove();
      }
    }, 5000);
  }
  
  function showLoadingState() {
    const saveButton = document.getElementById('save-product-v3');
    if (saveButton) {
      saveButton.disabled = true;
      saveButton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i> Guardando...';
    }
  }
  
  // Utility function to show success message
  function showSuccessMessage(message) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'alert alert-success alert-dismissible fade show position-fixed';
    messageDiv.style.top = '20px';
    messageDiv.style.right = '20px';
    messageDiv.style.zIndex = '9999';
    messageDiv.style.maxWidth = '400px';
    
    messageDiv.innerHTML = `
      <i class="fas fa-check-circle me-2"></i>
      <span>${message}</span>
      <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
    `;
    
    document.body.appendChild(messageDiv);
    
    setTimeout(() => {
      if (messageDiv && messageDiv.parentElement) {
        messageDiv.remove();
      }
    }, 3000);
  }
  
