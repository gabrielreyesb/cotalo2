<% content_for :page_title do %>
  <%= t('config.pdf_config_title') %>
<% end %>

<%= form_with(model: @pdf_config, url: pdf_config_path, method: :put, local: true, class: "needs-validation") do |form| %>
  <div class="row">
    <div class="col-md-8 offset-md-2 mb-4">
      <div class="settings-tab">
        <div class="green-accent-panel">
          <div class="card">
            <div class="card-header">
              <h5 class="mb-0"><%= t('config.pdf_config_title') %></h5>
            </div>
            <div class="card-body">
              <div class="mb-3">
                <label class="form-label"><%= t('config.company_logo') %></label>
                <div class="text-center mb-3">
                  <div id="pdf-logo-preview-container" class="border border-secondary rounded p-3 mb-3" style="min-height: 150px; display: flex; align-items: center; justify-content: center; flex-direction: column;">
                    <div id="pdf-logo-display-area" style="min-height: 120px; display: flex; align-items: center; justify-content: center;">
                      <div class="text-muted" id="pdf-logo-placeholder">
                        <i class="fas fa-image fa-3x mb-2"></i>
                        <p class="mb-0"><%= t('config.no_logo_selected') %></p>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="input-group">
                  <input type="file" class="form-control" id="pdf-logo-input" accept=".jpg,.jpeg,.png,.gif,image/jpeg,image/png,image/gif">
                  <button class="btn btn-dark border-secondary" type="button" id="upload-pdf-logo-btn" disabled>
                    <i class="fa fa-upload"></i> <%= t('config.upload') %>
                  </button>
                </div>
                <small class="form-text text-muted">
                  <%= t('config.accepted_formats') %>
                </small>
                <!-- Hidden field to preserve logo_url -->
                <%= form.hidden_field :logo_url, id: "pdf-logo-url-field" %>
              </div>

              <hr class="border-secondary my-3">

              <div class="mb-3">
                <%= form.label :footer_text, t('config.pdf_footer_label'), class: "form-label" %>
                <%= form.text_field :footer_text, class: "form-control", maxlength: 200, placeholder: t('config.pdf_footer_placeholder') %>
                <small class="form-text text-muted"><%= t('config.pdf_footer_help') %></small>
              </div>

              <hr class="border-secondary my-3">
              <h6><%= t('config.signature_section') %></h6>
              <div class="mb-3">
                <%= form.label :signature_name, t('config.signature_name'), class: "form-label" %>
                <%= form.text_field :signature_name, class: "form-control" %>
              </div>
              <div class="mb-3">
                <%= form.label :signature_email, t('config.signature_email'), class: "form-label" %>
                <%= form.email_field :signature_email, class: "form-control" %>
              </div>
              <div class="mb-3">
                <%= form.label :signature_phone, t('config.signature_phone'), class: "form-label" %>
                <%= form.telephone_field :signature_phone, class: "form-control" %>
              </div>
              <div class="mb-3">
                <%= form.label :signature_whatsapp, t('config.signature_whatsapp'), class: "form-label" %>
                <%= form.telephone_field :signature_whatsapp, class: "form-control" %>
              </div>
              <hr class="border-secondary my-3">
              <h6><%= t('config.sales_conditions_section') %></h6>
              <% (1..4).each do |i| %>
                <div class="mb-3">
                  <%= form.text_field "sales_condition_#{i}", class: "form-control", placeholder: t('config.sales_condition_placeholder', number: i) %>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- Hidden submit button to be triggered by subnavbar button -->
  <button type="submit" id="hidden-save-configs-btn" style="display:none"></button>
<% end %>

<% content_for :page_actions do %>
  <%= link_to t('common.cancel'), :back, class: "btn btn-outline-light me-2" %>
  <button type="button" class="btn btn-outline-light" id="save-configs-btn">
    <%= t('common.save') %>
  </button>
<% end %>

<script>
function initializePdfLogoUpload() {
  const logoInput = document.getElementById('pdf-logo-input');
  const uploadButton = document.getElementById('upload-pdf-logo-btn');
  const logoPlaceholder = document.getElementById('pdf-logo-placeholder');
  const logoDisplayArea = document.getElementById('pdf-logo-display-area');

  if (!logoInput) return;

  // Initialize the hidden field with current value or empty
  const logoUrlField = document.getElementById('pdf-logo-url-field');
  if (logoUrlField) {
    // Solo limpiar si no hay un valor válido
    if (!logoUrlField.value || logoUrlField.value.trim() === '') {
      logoUrlField.value = '';
    } else {
      // Si hay una URL válida, mostrar la imagen actual
      if (logoUrlField.value.startsWith('http')) {
        updateLogoDisplay(logoUrlField.value);
      }
    }
  }

  // Function to update the logo display
  function updateLogoDisplay(url) {
    // Remove placeholder
    if (logoPlaceholder) logoPlaceholder.style.display = 'none';
    
    // Remove any existing logo
    const existingLogo = document.getElementById('pdf-current-logo');
    if (existingLogo) {
      existingLogo.remove();
    }
    
    // Create new image
    const newLogo = document.createElement('img');
    newLogo.src = url;
    newLogo.className = 'img-fluid';
    newLogo.style.maxHeight = '120px';
    newLogo.id = 'pdf-current-logo';
    logoDisplayArea.appendChild(newLogo);
    
    // Update the hidden field with the new URL
    const logoUrlField = document.getElementById('pdf-logo-url-field');
    if (logoUrlField) {
      logoUrlField.value = url;
    }
  }

  logoInput.addEventListener('change', function() {
    const file = this.files[0];
    
    // Clear the hidden field when a new file is selected
    const logoUrlField = document.getElementById('pdf-logo-url-field');
    if (logoUrlField) {
      logoUrlField.value = '';
    }

    if (file) {
      // More permissive file type checking
      const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/octet-stream'];
      const validExtensions = ['.jpg', '.jpeg', '.png', '.gif'];
      
      const hasValidType = validTypes.includes(file.type);
      const hasValidExtension = validExtensions.some(ext => 
        file.name.toLowerCase().endsWith(ext)
      );

      if (!hasValidType && !hasValidExtension) {
        alert('Por favor selecciona una imagen en formato JPG, PNG o GIF');
        logoInput.value = ''; // Clear the input
        return;
      }

      // Validate file size
      if (file.size === 0) {
        alert('El archivo está vacío. Por favor selecciona una imagen válida.');
        logoInput.value = ''; // Clear the input
        return;
      }

      if (file.size > 2 * 1024 * 1024) { // 2MB in bytes
        alert('El archivo es demasiado grande. El tamaño máximo es 2MB.');
        logoInput.value = ''; // Clear the input
        return;
      }

      // Disable upload button and show loading
      uploadButton.disabled = true;
      uploadButton.textContent = 'Subiendo...';

      // Create preview immediately for better UX
      try {
        const objectUrl = URL.createObjectURL(file);
        
        // Remove any existing logo
        const existingLogo = document.getElementById('pdf-current-logo');
        if (existingLogo) {
          existingLogo.remove();
        }
        
        // Hide placeholder
        if (logoPlaceholder) logoPlaceholder.style.display = 'none';
        
        // Create and show preview
        const previewImg = document.createElement('img');
        previewImg.src = objectUrl;
        previewImg.className = 'img-fluid';
        previewImg.style.maxHeight = '120px';
        previewImg.id = 'pdf-current-logo';
        logoDisplayArea.appendChild(previewImg);
        
      } catch (error) {
        console.error('Error creating preview:', error);
      }

      // Upload automatically
      const formData = new FormData();
      formData.append('logo', file);

      fetch('/pdf_config/update_logo', {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          
          // Update the hidden field with the server URL
          const logoUrlField = document.getElementById('pdf-logo-url-field');
          if (logoUrlField) {
            logoUrlField.value = data.url;
          }
          
          // Update the display with the server URL
          updateLogoDisplay(data.url);
          
          // Clear the file input
          logoInput.value = '';
          
        } else {
          console.error('❌ Error al subir logo:', data.error);
          alert('Error al subir el logo: ' + data.error);
          
          // Remove preview on error
          const existingLogo = document.getElementById('pdf-current-logo');
          if (existingLogo) {
            existingLogo.remove();
          }
          if (logoPlaceholder) logoPlaceholder.style.display = 'block';
        }
      })
      .catch(error => {
        console.error('❌ Error en la petición:', error);
        alert('Error al subir el logo. Por favor intenta de nuevo.');
        
        // Remove preview on error
        const existingLogo = document.getElementById('pdf-current-logo');
        if (existingLogo) {
          existingLogo.remove();
        }
        if (logoPlaceholder) logoPlaceholder.style.display = 'block';
      })
      .finally(() => {
        uploadButton.disabled = false;
        uploadButton.textContent = 'Subir';
      });
    } else {
      // No file selected
      uploadButton.disabled = true;
      
      // Remove any existing logo
      const existingLogo = document.getElementById('pdf-current-logo');
      if (existingLogo) {
        existingLogo.remove();
      }
      
      // Show placeholder
      if (logoPlaceholder) logoPlaceholder.style.display = 'block';
    }
  });

  // Upload button is now just for visual feedback - no event listener needed
  if (uploadButton) {
    uploadButton.disabled = true; // Disabled by default
    uploadButton.textContent = 'Subir';
  }
}

// Initialize on both DOMContentLoaded and turbo:load
document.addEventListener('DOMContentLoaded', initializePdfLogoUpload);
document.addEventListener('turbo:load', initializePdfLogoUpload);

document.addEventListener('DOMContentLoaded', function() {
  var saveBtn = document.getElementById('save-configs-btn');
  var hiddenSubmit = document.getElementById('hidden-save-configs-btn');
  var logoUrlField = document.getElementById('pdf-logo-url-field');
  
  if (logoUrlField) {
  }
  
  if (saveBtn && hiddenSubmit) {
    saveBtn.addEventListener('click', function() {
      
      // Verificar que el campo hidden tenga un valor válido
      if (logoUrlField && !logoUrlField.value.trim()) {
        const currentLogo = document.getElementById('pdf-current-logo');
        if (currentLogo && currentLogo.src && currentLogo.src !== window.location.href) {
          logoUrlField.value = currentLogo.src;
        }
      }
      
      // Log todos los campos del formulario antes de enviar
      const form = document.querySelector('form');
      if (form) {
        const formData = new FormData(form);
        for (let [key, value] of formData.entries()) {
        }
      }
      
      hiddenSubmit.click();
    });
  }
});
</script> 