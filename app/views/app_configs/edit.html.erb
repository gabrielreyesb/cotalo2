<%= form_with(url: app_configs_path, method: :put, class: "needs-validation", local: true) do |form| %>
  <% content_for :page_title do %>
    <%= t('config.title') %>
  <% end %>

  <div class="row">
    <div class="col-md-8 offset-md-2 mb-4">
      <div class="settings-tab">
        <div class="green-accent-panel">
          <div class="card">
            <div class="card-header">
              <h5 class="mb-0"><%= t('config.general_settings') %></h5>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-4">
                  <%= form.label :waste_percentage, t('config.waste_percentage'), class: "form-label" %>
                  <div class="input-group">
                    <%= form.number_field :waste_percentage, value: @general_settings[:waste_percentage], class: "form-control bg-dark text-light border-secondary", min: 0, max: 100, step: 1 %>
                    <span class="input-group-text bg-dark text-light border-secondary">%</span>
                  </div>
                </div>
                
                <div class="col-md-4">
                  <%= form.label :width_margin, t('config.width_margin'), class: "form-label" %>
                  <div class="input-group">
                    <%= form.number_field :width_margin, value: @general_settings[:width_margin], step: '0.01', class: "form-control bg-dark text-light border-secondary" %>
                  </div>
                </div>
                
                <div class="col-md-4">
                  <%= form.label :length_margin, t('config.length_margin'), class: "form-label" %>
                  <div class="input-group">
                    <%= form.number_field :length_margin, value: @general_settings[:length_margin], step: '0.01', class: "form-control bg-dark text-light border-secondary" %>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- API Configuration section -->
  <div class="row">
    <div class="col-md-8 offset-md-2 mb-4">
      <div class="settings-tab">
        <div class="green-accent-panel">
          <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
              <h5 class="mb-0">API Configuration</h5>
            </div>
            <div class="card-body">
              <p class="text-muted mb-3">
                Configure external API connections. API keys are stored in the database and available immediately.
              </p>
              <div class="mb-3">
                <%= form.label :pipedrive_api_key, "Pipedrive API Key", class: "form-label" %>
                <div class="input-group">
                  <%= form.text_field :pipedrive_api_key, value: current_user.get_config(AppConfig::PIPEDRIVE_API_KEY), placeholder: "Enter Pipedrive API key", class: "form-control text-start", autocomplete: "off", id: "pipedrive_api_key_input" %>
                </div>
                <small class="form-text text-muted">The API key will be stored in the database and will be used immediately.</small>
              </div>
              <div class="mb-3">
                <%= form.label :facturama_api_key, "Facturama API Key", class: "form-label" %>
                <div class="input-group">
                  <%= form.text_field :facturama_api_key, value: current_user.get_config(AppConfig::FACTURAMA_API_KEY), placeholder: "Enter Facturama API key", class: "form-control text-start", autocomplete: "off", id: "facturama_api_key_input" %>
                </div>
                <small class="form-text text-muted">The API key will be stored in the database and will be used immediately.</small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Hidden submit button to be triggered by subnavbar button -->
  <button type="submit" id="hidden-save-configs-btn" style="display:none"></button>
<% end %>

<% content_for :styles do %>
<style>
  .app-settings-container {
    padding: 1rem;
  }
</style>
<% end %>

<% content_for :scripts do %>
  <script>
    console.log('Script section loaded');
    
    // Function to initialize the test button
    function initializeTestButton() {
      console.log('Initializing test button...');
      const testButton = document.getElementById('test_facturama_api');
      const createProductButton = document.getElementById('test_create_product');
      const resultsDiv = document.getElementById('results');
      const contentDiv = document.getElementById('content');

      console.log('Elements found:', {
        testButton: testButton ? 'Yes' : 'No',
        createProductButton: createProductButton ? 'Yes' : 'No',
        resultsDiv: resultsDiv ? 'Yes' : 'No',
        contentDiv: contentDiv ? 'Yes' : 'No'
      });

      if (testButton) {
        console.log('Adding click event listener to test button');
        testButton.addEventListener('click', function(e) {
          console.log('Test button clicked!');
          e.preventDefault();
          
          // Show loading state
          testButton.disabled = true;
          testButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Testing...';
          resultsDiv.classList.remove('d-none');
          contentDiv.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Testing API connection...</div>';

          console.log('Making API request to /app_configs/test_facturama_api');
          // Make the API request
          fetch('/app_configs/test_facturama_api', {
            method: 'GET',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Accept': 'application/json'
            }
          })
          .then(response => {
            console.log('API Response received:', response);
            return response.json();
          })
          .then(data => {
            console.log('API Data:', data);
            if (data.success) {
              let html = `
                <div class="alert alert-success">
                  <h6 class="mb-2">Connection Successful!</h6>
                  <p class="mb-0">Successfully retrieved ${data.products.length} products from Facturama</p>
                </div>
                <div class="mt-3">
                  <h6>Products List:</h6>
                  <div class="table-responsive">
                    <table class="table table-sm">
                      <thead>
                        <tr>
                          <th>Name</th>
                          <th>Description</th>
                          <th>Unit</th>
                          <th>Price</th>
                          <th>Category</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${data.products.map(product => `
                          <tr>
                            <td>${product.Name || '-'}</td>
                            <td>${product.Description || '-'}</td>
                            <td>${product.Unit || '-'}</td>
                            <td>${product.Price || '-'}</td>
                            <td>${product.Category || '-'}</td>
                          </tr>
                        `).join('')}
                      </tbody>
                    </table>
                  </div>
                </div>
              `;
              contentDiv.innerHTML = html;
            } else {
              contentDiv.innerHTML = `
                <div class="alert alert-danger">
                  <h6 class="mb-2">Connection Failed</h6>
                  <p class="mb-0">${data.error}</p>
                </div>
              `;
            }
          })
          .catch(error => {
            console.error('API Error:', error);
            contentDiv.innerHTML = `
              <div class="alert alert-danger">
                <h6 class="mb-2">Error</h6>
                <p class="mb-0">Failed to test API connection: ${error.message}</p>
              </div>
            `;
          })
          .finally(() => {
            console.log('API request completed');
            // Reset button state
            testButton.disabled = false;
            testButton.innerHTML = '<i class="fas fa-vial"></i> Test Facturama API Connection';
          });
        });
      }

      if (createProductButton) {
        console.log('Adding click event listener to create product button');
        createProductButton.addEventListener('click', function(e) {
          console.log('Create product button clicked!');
          e.preventDefault();
          
          // Get form data
          const productName = document.getElementById('product_name').value;
          const productDescription = document.getElementById('product_description').value;
          const productPrice = parseFloat(document.getElementById('product_price').value);

          if (!productName || !productDescription || !productPrice) {
            contentDiv.innerHTML = `
              <div class="alert alert-danger">
                <h6 class="mb-2">Error</h6>
                <p class="mb-0">Please fill in all product fields</p>
              </div>
            `;
            return;
          }

          // Show loading state
          createProductButton.disabled = true;
          createProductButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
          resultsDiv.classList.remove('d-none');
          contentDiv.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Creating product...</div>';

          // Product data from form
          const productData = {
            name: productName,
            description: productDescription,
            price: productPrice
          };

          console.log('Making API request to /app_configs/test_create_product with data:', productData);
          // Make the API request
          fetch('/app_configs/test_create_product', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(productData)
          })
          .then(response => {
            console.log('API Response received:', response);
            return response.json();
          })
          .then(data => {
            console.log('API Data:', data);
            if (data.success) {
              contentDiv.innerHTML = `
                <div class="alert alert-success">
                  <h6 class="mb-2">Product Created Successfully!</h6>
                  <p class="mb-0">Product ID: ${data.product.Id}</p>
                  <p class="mb-0">Name: ${data.product.Name}</p>
                  <p class="mb-0">Price: ${data.product.Price}</p>
                </div>
              `;
            } else {
              contentDiv.innerHTML = `
                <div class="alert alert-danger">
                  <h6 class="mb-2">Failed to Create Product</h6>
                  <p class="mb-0">${data.error}</p>
                </div>
              `;
            }
          })
          .catch(error => {
            console.error('API Error:', error);
            contentDiv.innerHTML = `
              <div class="alert alert-danger">
                <h6 class="mb-2">Error</h6>
                <p class="mb-0">Failed to create product: ${error.message}</p>
              </div>
            `;
          })
          .finally(() => {
            console.log('API request completed');
            // Reset button state
            createProductButton.disabled = false;
            createProductButton.innerHTML = '<i class="fas fa-plus"></i> Create Product';
          });
        });
      }
    }

    // Initialize on both DOMContentLoaded and turbo:load
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM Content Loaded');
      initializeTestButton();
    });

    document.addEventListener('turbo:load', function() {
      console.log('Turbo Loaded');
      initializeTestButton();
    });

    // Add submit event listener for Pipedrive API key form
    document.addEventListener('DOMContentLoaded', function() {
      var pipedriveForm = document.getElementById('pipedrive_api_key_form');
      if (pipedriveForm) {
        pipedriveForm.addEventListener('submit', function(e) {
          console.log('Pipedrive API Key form is being submitted!');
          alert('Pipedrive API Key form is being submitted!');
        });
      }
    });
  </script>
<% end %>

<% content_for :page_scripts do %>
  <script>
    function initializeLogoUpload() {
      const logoInput = document.getElementById('logo-input');
      const uploadButton = document.getElementById('upload-logo-btn');
      const logoPreview = document.getElementById('logo-preview');
      const currentLogo = document.getElementById('current-logo');
      const logoPlaceholder = document.getElementById('logo-placeholder');
      const logoDisplayArea = document.getElementById('logo-display-area');

      if (!logoInput) return; // Exit if elements aren't found

      // Function to handle file selection
      logoInput.addEventListener('change', function() {
        const file = this.files[0];
        console.log('File selected:', file ? {
          name: file.name,
          type: file.type,
          size: file.size,
          lastModified: new Date(file.lastModified).toISOString()
        } : 'No file');
        
        if (file) {
          // More permissive file type checking
          const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/octet-stream'];
          const validExtensions = ['.jpg', '.jpeg', '.png', '.gif'];
          
          const hasValidType = validTypes.includes(file.type);
          const hasValidExtension = validExtensions.some(ext => 
            file.name.toLowerCase().endsWith(ext)
          );

          if (!hasValidType && !hasValidExtension) {
            console.error('Invalid file type or extension:', file.type, file.name);
            alert('Por favor selecciona una imagen en formato JPG, PNG o GIF');
            logoInput.value = ''; // Clear the input
            return;
          }

          // Validate file size
          if (file.size === 0) {
            console.error('File size is 0 bytes');
            alert('El archivo está vacío. Por favor selecciona una imagen válida.');
            logoInput.value = ''; // Clear the input
            return;
          }

          if (file.size > 2 * 1024 * 1024) { // 2MB in bytes
            console.error('File too large:', file.size);
            alert('El archivo es demasiado grande. El tamaño máximo es 2MB.');
            logoInput.value = ''; // Clear the input
            return;
          }

          // Enable upload button when file is selected
          uploadButton.disabled = false;
          
          // Create preview using URL.createObjectURL for better compatibility
          try {
            const objectUrl = URL.createObjectURL(file);
            
            // Create a new image to test loading
            const img = new Image();
            
            img.onload = function() {
              console.log('Image loaded successfully:', {
                width: img.width,
                height: img.height,
                naturalWidth: img.naturalWidth,
                naturalHeight: img.naturalHeight
              });

              if (img.width === 0 || img.height === 0) {
                console.error('Invalid image dimensions');
                alert('La imagen no tiene dimensiones válidas. Por favor intenta con otra.');
                logoInput.value = '';
                URL.revokeObjectURL(objectUrl);
                return;
              }
              
              // Remove any existing filename
              const existingFilename = logoDisplayArea.querySelector('p.text-muted');
              if (existingFilename) {
                existingFilename.remove();
              }
              
              // Hide current logo or placeholder
              if (currentLogo) currentLogo.style.display = 'none';
              if (logoPlaceholder) logoPlaceholder.style.display = 'none';
              
              // Show and update preview
              logoPreview.style.display = 'block';
              logoPreview.src = objectUrl;

              // Add preview filename below the image
              const filename = document.createElement('p');
              filename.className = 'text-muted mt-2 mb-0';
              filename.textContent = file.name;
              logoDisplayArea.appendChild(filename);
            };
            
            img.onerror = function(error) {
              console.error('Image loading error:', error);
              
              // Fallback to FileReader if URL.createObjectURL fails
              const reader = new FileReader();
              reader.onload = function(e) {
                logoPreview.style.display = 'block';
                logoPreview.src = e.target.result;
                
                const filename = document.createElement('p');
                filename.className = 'text-muted mt-2 mb-0';
                filename.textContent = file.name;
                logoDisplayArea.appendChild(filename);
              };
              
              reader.onerror = function() {
                console.error('FileReader error:', reader.error);
                alert('Error al cargar la vista previa. Por favor intenta con otra imagen.');
                logoInput.value = '';
              };
              
              reader.readAsDataURL(file);
            };
            
            img.src = objectUrl;
          } catch (error) {
            console.error('Error creating preview:', error);
            alert('Error al crear la vista previa. Por favor intenta con otra imagen.');
            logoInput.value = '';
          }
        } else {
          // No file selected
          uploadButton.disabled = true;
          
          // Show current logo or placeholder
          if (currentLogo) currentLogo.style.display = 'block';
          if (logoPlaceholder && !currentLogo) logoPlaceholder.style.display = 'block';
          
          // Hide preview
          if (logoPreview) logoPreview.style.display = 'none';
          
          // Remove filename if exists
          const filename = logoDisplayArea.querySelector('p.text-muted');
          if (filename) filename.remove();
        }
      });

      // Handle upload
      uploadButton.addEventListener('click', function() {
        if (!logoInput.files[0]) {
          alert('Por favor selecciona un archivo primero');
          return;
        }

        // Show loading state
        uploadButton.disabled = true;
        uploadButton.innerHTML = '<i class="fa fa-spinner fa-spin"></i> Subiendo...';

        const formData = new FormData();
        formData.append('logo', logoInput.files[0]);
        
        // Get CSRF token from meta tag
        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        fetch('/app_configs/update_logo', {
          method: 'POST',
          body: formData,
          headers: {
            'X-CSRF-Token': csrfToken
          },
          credentials: 'same-origin'
        })
        .then(response => {
          if (!response.ok) {
            return response.json().then(data => {
              throw new Error(data.error || 'Error desconocido');
            });
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            location.reload();
          } else {
            throw new Error(data.error || 'Error desconocido');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Error al subir el logo: ' + error.message);
          // Reset button state
          uploadButton.disabled = false;
          uploadButton.innerHTML = '<i class="fa fa-upload"></i> Subir';
        });
      });

      // Clear file input when clicking "Cancelar"
      const cancelButton = document.querySelector('a.btn-outline-secondary');
      if (cancelButton) {
        cancelButton.addEventListener('click', function() {
          logoInput.value = '';
          // Trigger change event to reset preview
          logoInput.dispatchEvent(new Event('change'));
        });
      }
    }

    // Initialize on both DOMContentLoaded and turbo:load
    document.addEventListener('DOMContentLoaded', initializeLogoUpload);
    document.addEventListener('turbo:load', initializeLogoUpload);
  </script>
<% end %>

<% content_for :page_actions do %>
  <%= link_to t('common.cancel'), dashboard_path, class: 'btn btn-outline-secondary me-2' %>
  <button class="btn btn-success" id="save-configs-btn" type="button" onclick="document.getElementById('hidden-save-configs-btn').click()">
    <i class="fas fa-save"></i> <%= t('common.save') %>
  </button>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    var saveBtn = document.getElementById('save-configs-btn');
    var hiddenSubmit = document.getElementById('hidden-save-configs-btn');
    if (saveBtn && hiddenSubmit) {
      saveBtn.addEventListener('click', function() {
        hiddenSubmit.click();
      });
    }
  });
</script> 