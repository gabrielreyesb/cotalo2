<div class="container-fluid h-100 overflow-auto">
  <div class="row mb-4">
    <div class="col-12">
      <h1 class="text-light">Configuraciones</h1>
    </div>
  </div>

  <%= form_with(url: app_configs_path, method: :put, class: "needs-validation") do |form| %>
    <div class="row">
      <div class="col-md-6 mb-4">
        <div class="settings-tab">
          <div class="green-accent-panel">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">Configuraciones generales</h5>
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <%= form.label :waste_percentage, "Porcentaje de desperdicio", class: "form-label" %>
                  <div class="input-group">
                    <%= form.number_field :waste_percentage, value: @general_settings[:waste_percentage], class: "form-control", min: 0, max: 100, step: 1 %>
                    <span class="input-group-text">%</span>
                  </div>
                </div>
                
                <div class="mb-3">
                  <%= form.label :margin_percentage, "Porcentaje de margen (%)", class: "form-label" %>
                  <%= form.number_field :margin_percentage, value: @general_settings[:margin_percentage], step: '0.01', class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.label :width_margin, "Margen de ancho", class: "form-label" %>
                  <%= form.number_field :width_margin, value: @general_settings[:width_margin], step: '0.01', class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.label :length_margin, "Margen de largo", class: "form-label" %>
                  <%= form.number_field :length_margin, value: @general_settings[:length_margin], step: '0.01', class: "form-control" %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="col-md-6 mb-4">
        <div class="settings-tab">
          <div class="green-accent-panel">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">Información de firma</h5>
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <%= form.label :signature_name, "Nombre", class: "form-label" %>
                  <%= form.text_field :signature_name, value: @signature_info[:name], class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.label :signature_email, "Correo", class: "form-label" %>
                  <%= form.email_field :signature_email, value: @signature_info[:email], class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.label :signature_phone, "Teléfono", class: "form-label" %>
                  <%= form.telephone_field :signature_phone, value: @signature_info[:phone], class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.label :signature_whatsapp, "WhatsApp", class: "form-label" %>
                  <%= form.telephone_field :signature_whatsapp, value: @signature_info[:whatsapp], class: "form-control" %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-12 mb-4">
        <div class="settings-tab">
          <div class="green-accent-panel">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">Condiciones de venta</h5>
              </div>
              <div class="card-body">
                <div class="mb-3">
                  <%= form.text_field :condition_1, value: @sales_conditions[:condition_1], class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.text_field :condition_2, value: @sales_conditions[:condition_2], class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.text_field :condition_3, value: @sales_conditions[:condition_3], class: "form-control" %>
                </div>
                
                <div class="mb-3">
                  <%= form.text_field :condition_4, value: @sales_conditions[:condition_4], class: "form-control" %>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row">
      <div class="col-12 d-flex gap-2 justify-content-end">
        <%= link_to "Cancelar", :back, class: "btn btn-outline-secondary" %>
        <%= form.submit "Guardar", class: "btn btn-primary" %>
      </div>
    </div>
  <% end %>

  <!-- API Configuration section -->
  <div class="row">
    <div class="col-12 mb-4">
      <div class="settings-tab">
        <div class="green-accent-panel">
          <div class="card">
            <div class="card-header">
              <h5 class="mb-0">API Configuration</h5>
              <span class="badge <%= AppConfig.get_pipedrive_api_key.present? ? 'bg-success' : 'bg-danger' %>">
                <%= AppConfig.get_pipedrive_api_key.present? ? 'Configured' : 'Not Configured' %>
              </span>
            </div>
            <div class="card-body">
              <p class="text-muted mb-3">
                Configure external API connections. API keys are stored in the database and available immediately.
              </p>
              
              <%= form_with(url: update_api_key_app_configs_path, method: :put, class: "mb-0", id: "api_key_form", local: true) do |api_form| %>
                <div class="mb-3">
                  <%= api_form.label :pipedrive_api_key, "Pipedrive API Key", class: "form-label" %>
                  <div class="input-group">
                    <%= api_form.password_field :pipedrive_api_key, placeholder: "Enter new API key", class: "form-control", autocomplete: "off", id: "pipedrive_api_key_input" %>
                    <%= api_form.hidden_field :authenticity_token, value: form_authenticity_token, id: "authenticity_token_main" %>
                    <button type="submit" class="btn btn-primary">Update API Key</button>
                  </div>
                  <small class="form-text text-muted">The API key will be stored in the database and will be used immediately.</small>
                </div>
              <% end %>

              <%= form_with(url: update_api_key_app_configs_path, method: :put, class: "mb-0", id: "facturama_api_key_form", local: true) do |api_form| %>
                <div class="mb-3">
                  <%= api_form.label :facturama_api_key, "Facturama API Key", class: "form-label" %>
                  <div class="input-group">
                    <%= api_form.password_field :facturama_api_key, placeholder: "Enter new API key", class: "form-control", autocomplete: "off", id: "facturama_api_key_input" %>
                    <%= api_form.hidden_field :authenticity_token, value: form_authenticity_token, id: "authenticity_token_facturama" %>
                    <button type="submit" class="btn btn-primary">Update API Key</button>
                  </div>
                  <small class="form-text text-muted">The API key will be stored in the database and will be used immediately.</small>
                </div>
              <% end %>

              <div class="mt-4">
                <% if @facturama_api_configured %>
                  <div class="alert alert-success mb-3">
                    <i class="fas fa-check-circle"></i> Facturama API key is configured
                  </div>
                  
                  <div class="mb-3">
                    <button type="button" class="btn btn-info me-2" id="test_facturama_api">
                      <i class="fas fa-vial"></i> Test Facturama API Connection
                    </button>
                    <button type="button" class="btn btn-success me-2" id="test_create_product">
                      <i class="fas fa-plus"></i> Create Product
                    </button>
                  </div>

                  <div id="results" class="d-none">
                    <h6 class="mb-2">API Test Results</h6>
                    <div id="content"></div>
                  </div>
                <% else %>
                  <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i> Please configure your Facturama API key above to enable API testing
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<% content_for :styles do %>
<style>
  .settings-tab {
    position: relative;
  }

  /* Remove any fixed positioning or height constraints */
  .container-fluid {
    min-height: auto;
    position: static;
  }

  /* Green accent panel styling - Base */
  .green-accent-panel > .card:not(.shadow-sm) {
    border-left: 4px solid #42b983;
    padding-left: 0.5rem;
    margin-left: 0.5rem;
  }

  /* Card styling */
  .card {
    background-color: #23272b;
    border-color: #32383e;
    margin-bottom: 1.5rem;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.15);
  }

  .card-body {
    padding: 1rem;
  }

  .card-header {
    background-color: #23272b;
    border-bottom: 1px solid #32383e;
    padding: 1rem;
  }

  .card-header h5 {
    color: #e1e1e1;
    margin: 0;
  }

  /* Form controls with dark theme */
  .form-select, 
  .form-control {
    color: #e1e1e1 !important;
    background-color: #2c3136 !important;
    border: 1px solid #495057;
    border-radius: 4px;
  }

  .form-select:focus,
  .form-control:focus {
    border-color: #42b983;
    background-color: #2c3136 !important;
    color: #e1e1e1 !important;
    box-shadow: 0 0 0 0.2rem rgba(66, 185, 131, 0.25);
  }

  .form-select::placeholder,
  .form-control::placeholder {
    color: #6c757d;
  }

  /* Label styling */
  .form-label {
    color: #adb5bd;
    margin-bottom: 0.5rem;
  }

  /* Button styling */
  .btn-primary {
    color: #fff;
    background-color: #42b983;
    border-color: #42b983;
  }

  .btn-primary:hover {
    background-color: #3aa876;
    border-color: #3aa876;
  }

  .btn-outline-secondary {
    color: #adb5bd;
    border-color: #495057;
  }

  .btn-outline-secondary:hover {
    background-color: #495057;
    color: #fff;
    border-color: #495057;
  }

  /* Text colors */
  .text-muted {
    color: #6c757d !important;
  }

  .text-light {
    color: #f8f9fa !important;
  }
</style>
<% end %>

<% content_for :scripts do %>
  <script>
    console.log('Script section loaded');
    
    // Function to initialize the test button
    function initializeTestButton() {
      console.log('Initializing test button...');
      const testButton = document.getElementById('test_facturama_api');
      const createProductButton = document.getElementById('test_create_product');
      const resultsDiv = document.getElementById('results');
      const contentDiv = document.getElementById('content');

      console.log('Elements found:', {
        testButton: testButton ? 'Yes' : 'No',
        createProductButton: createProductButton ? 'Yes' : 'No',
        resultsDiv: resultsDiv ? 'Yes' : 'No',
        contentDiv: contentDiv ? 'Yes' : 'No'
      });

      if (testButton) {
        console.log('Adding click event listener to test button');
        testButton.addEventListener('click', function(e) {
          console.log('Test button clicked!');
          e.preventDefault();
          
          // Show loading state
          testButton.disabled = true;
          testButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Testing...';
          resultsDiv.classList.remove('d-none');
          contentDiv.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Testing API connection...</div>';

          console.log('Making API request to /app_configs/test_facturama_api');
          // Make the API request
          fetch('/app_configs/test_facturama_api', {
            method: 'GET',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Accept': 'application/json'
            }
          })
          .then(response => {
            console.log('API Response received:', response);
            return response.json();
          })
          .then(data => {
            console.log('API Data:', data);
            if (data.success) {
              let html = `
                <div class="alert alert-success">
                  <h6 class="mb-2">Connection Successful!</h6>
                  <p class="mb-0">Successfully retrieved ${data.products.length} products from Facturama</p>
                </div>
                <div class="mt-3">
                  <h6>Products List:</h6>
                  <div class="table-responsive">
                    <table class="table table-sm">
                      <thead>
                        <tr>
                          <th>Name</th>
                          <th>Description</th>
                          <th>Unit</th>
                          <th>Price</th>
                          <th>Category</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${data.products.map(product => `
                          <tr>
                            <td>${product.Name || '-'}</td>
                            <td>${product.Description || '-'}</td>
                            <td>${product.Unit || '-'}</td>
                            <td>${product.Price || '-'}</td>
                            <td>${product.Category || '-'}</td>
                          </tr>
                        `).join('')}
                      </tbody>
                    </table>
                  </div>
                </div>
              `;
              contentDiv.innerHTML = html;
            } else {
              contentDiv.innerHTML = `
                <div class="alert alert-danger">
                  <h6 class="mb-2">Connection Failed</h6>
                  <p class="mb-0">${data.error}</p>
                </div>
              `;
            }
          })
          .catch(error => {
            console.error('API Error:', error);
            contentDiv.innerHTML = `
              <div class="alert alert-danger">
                <h6 class="mb-2">Error</h6>
                <p class="mb-0">Failed to test API connection: ${error.message}</p>
              </div>
            `;
          })
          .finally(() => {
            console.log('API request completed');
            // Reset button state
            testButton.disabled = false;
            testButton.innerHTML = '<i class="fas fa-vial"></i> Test Facturama API Connection';
          });
        });
      }

      if (createProductButton) {
        console.log('Adding click event listener to create product button');
        createProductButton.addEventListener('click', function(e) {
          console.log('Create product button clicked!');
          e.preventDefault();
          
          // Get form data
          const productName = document.getElementById('product_name').value;
          const productDescription = document.getElementById('product_description').value;
          const productPrice = parseFloat(document.getElementById('product_price').value);

          if (!productName || !productDescription || !productPrice) {
            contentDiv.innerHTML = `
              <div class="alert alert-danger">
                <h6 class="mb-2">Error</h6>
                <p class="mb-0">Please fill in all product fields</p>
              </div>
            `;
            return;
          }

          // Show loading state
          createProductButton.disabled = true;
          createProductButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
          resultsDiv.classList.remove('d-none');
          contentDiv.innerHTML = '<div class="text-center"><i class="fas fa-spinner fa-spin"></i> Creating product...</div>';

          // Product data from form
          const productData = {
            name: productName,
            description: productDescription,
            price: productPrice
          };

          console.log('Making API request to /app_configs/test_create_product with data:', productData);
          // Make the API request
          fetch('/app_configs/test_create_product', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(productData)
          })
          .then(response => {
            console.log('API Response received:', response);
            return response.json();
          })
          .then(data => {
            console.log('API Data:', data);
            if (data.success) {
              contentDiv.innerHTML = `
                <div class="alert alert-success">
                  <h6 class="mb-2">Product Created Successfully!</h6>
                  <p class="mb-0">Product ID: ${data.product.Id}</p>
                  <p class="mb-0">Name: ${data.product.Name}</p>
                  <p class="mb-0">Price: ${data.product.Price}</p>
                </div>
              `;
            } else {
              contentDiv.innerHTML = `
                <div class="alert alert-danger">
                  <h6 class="mb-2">Failed to Create Product</h6>
                  <p class="mb-0">${data.error}</p>
                </div>
              `;
            }
          })
          .catch(error => {
            console.error('API Error:', error);
            contentDiv.innerHTML = `
              <div class="alert alert-danger">
                <h6 class="mb-2">Error</h6>
                <p class="mb-0">Failed to create product: ${error.message}</p>
              </div>
            `;
          })
          .finally(() => {
            console.log('API request completed');
            // Reset button state
            createProductButton.disabled = false;
            createProductButton.innerHTML = '<i class="fas fa-plus"></i> Create Product';
          });
        });
      }
    }

    // Initialize on both DOMContentLoaded and turbo:load
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM Content Loaded');
      initializeTestButton();
    });

    document.addEventListener('turbo:load', function() {
      console.log('Turbo Loaded');
      initializeTestButton();
    });
  </script>
<% end %> 