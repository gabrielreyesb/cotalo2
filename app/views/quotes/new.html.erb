<% content_for :page_title do %>
  <%= t('quotes.new.title') %>
<% end %>

<% content_for :page_actions do %>
  <%= link_to quotes_path, class: "btn btn-outline-light me-2" do %>
    <i class="fa fa-arrow-left me-1"></i> <%= t('common.cancel') %>
  <% end %>
  <button type="button" class="btn btn-outline-light" id="save-quote-button">
    <i class="fa fa-save me-1"></i> <%= t('common.save') %>
  </button>
<% end %>

<div class="main-content">
  <div class="container-fluid h-100 overflow-auto py-4">
    <!-- Info Block -->
    <% unless current_user.block_closed?('new_quote_info') %>
      <div class="mb-4" id="new-quote-info-block">
        <div class="green-accent-panel position-relative">
          <button type="button" class="btn btn-sm btn-outline-success position-absolute top-0 end-0 m-3" 
                  id="close-new-quote-info-btn" aria-label="Close" style="z-index: 10;">
            <i class="fa fa-times"></i>
          </button>
          <div class="card-body p-4">
            <div class="d-flex align-items-start">
              <div class="me-3">
                <span style="font-size: 2rem;">üßæ</span>
              </div>
              <div class="flex-grow-1">
                <h5 class="mb-3"><%= t('quotes.new.info.title') %></h5>
                <p class="text-light-gray mb-3"><%= t('quotes.new.info.description') %></p>
                <div class="mb-3">
                  <p class="text-light-gray mb-2"><strong><%= t('quotes.new.info.step1_title') %></strong></p>
                  <p class="text-light-gray mb-2 ms-3"><strong>üè∑Ô∏è</strong> <%= t('quotes.new.info.step1_text') %></p>
                </div>
                <div class="mb-3">
                  <p class="text-light-gray mb-2"><strong><%= t('quotes.new.info.step2_title') %></strong></p>
                  <p class="text-light-gray mb-2 ms-3"><strong>üë§</strong> <%= t('quotes.new.info.step2_text') %></p>
                </div>
                <div class="mb-3">
                  <p class="text-light-gray mb-2"><strong><%= t('quotes.new.info.step3_title') %></strong></p>
                  <p class="text-light-gray mb-2 ms-3"><strong>üì¶</strong> <%= t('quotes.new.info.step3_text') %></p>
                </div>
                <p class="text-light-gray mb-0"><strong>üì§</strong> <%= t('quotes.new.info.final_note') %></p>
              </div>
            </div>
          </div>
        </div>
      </div>
    <% end %>
    
    <!-- Vue app mount point -->
    <div id="quote-form-app" class="quote-form-root" 
      data-available-products="<%= @products.to_json(methods: [:formatted_description], except: [:created_at, :updated_at]) %>"
      data-quote="{}"
      data-edit-mode="false"
      data-translations='<%= {
        quote_info: t("quotes.form.quote_info"),
        project_name: t("quotes.form.project_name"),
        customer_info: t("quotes.form.customer_info"),
        customer_name: t("quotes.form.customer_name"),
        searching_customers: t("quotes.form.searching_customers"),
        organization: t("quotes.form.organization"),
        select_organization: t("quotes.form.select_organization"),
        no_organization: t("quotes.form.no_organization"),
        email: t("quotes.form.email"),
        telephone: t("quotes.form.telephone"),
        comments: t("quotes.form.comments"),
        add_product: t("quotes.form.add_product"),
        search_product: t("quotes.form.search_product"),
        search_by_description: t("quotes.form.search_by_description"),
        select_product: t("quotes.form.select_product"),
        add_to_quote: t("quotes.form.add_to_quote"),
        selected_products: t("quotes.form.selected_products"),
        no_selected_products: t("quotes.form.no_selected_products"),
        product: t("quotes.form.product"),
        price: t("quotes.form.price"),
        price_summary: t("quotes.form.price_summary"),
        subtotal: t("quotes.form.subtotal"),
        tax: t("quotes.form.tax"),
        total: t("quotes.form.total"),
        search_customer: t("quotes.form.search_customer"),
        enter_at_least_3_chars: t("quotes.form.enter_at_least_3_chars"),
        search: t("quotes.form.search"),
        loading: t("quotes.form.loading"),
        no_customers_found: t("quotes.form.no_customers_found"),
        name: t("quotes.form.name"),
        select: t("quotes.form.select"),
        close: t("quotes.form.close"),
        validations: {
          project_name_required: t('activerecord.errors.models.quote.attributes.project_name.blank'),
          customer_name_required: t('activerecord.errors.models.quote.attributes.customer_name.blank'),
          organization_required: t('activerecord.errors.models.quote.attributes.organization.blank'),
          email_required: t('activerecord.errors.models.quote.attributes.email.blank'),
          email_invalid: t('activerecord.errors.models.quote.attributes.email.invalid'),
          at_least_one_product: t('activerecord.errors.models.quote.errors.at_least_one_product')
        }
      }.to_json.html_safe %>'>
    </div>
  </div>
</div>

<!-- CSRF token -->
<%= tag.meta name: "csrf-token", content: form_authenticity_token %>

<!-- Load Vue app -->
<%= javascript_pack_tag 'quote_form' %>

<script>
function closeBlock(blockName) {
  console.log('closeBlock called with:', blockName);
  
  // Get CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  console.log('CSRF Token:', csrfToken);
  
  fetch('<%= close_block_path %>', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken
    },
    body: JSON.stringify({ block_name: blockName })
  })
  .then(response => {
    console.log('Response status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('Response data:', data);
    if (data.success) {
      const blockElement = document.getElementById(blockName.replace(/_/g, '-') + '-block');
      console.log('Block element:', blockElement);
      console.log('Looking for element with ID:', blockName.replace(/_/g, '-') + '-block');
      if (blockElement) {
        console.log('Found block element, starting fade out...');
        blockElement.style.transition = 'opacity 0.3s ease-out';
        blockElement.style.opacity = '0';
        setTimeout(() => {
          blockElement.remove();
          console.log('Block element removed from DOM');
        }, 300);
      } else {
        console.error('Block element not found with ID:', blockName + '-block');
      }
    }
  })
  .catch(error => {
    console.error('Error closing block:', error);
  });
}

// Test function to verify the block exists and set up event listeners
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, setting up event listeners for new quote info...');
  
  const infoBlock = document.getElementById('new-quote-info-block');
  console.log('New quote info block found:', infoBlock);
  
  const closeButton = document.getElementById('close-new-quote-info-btn');
  console.log('Close button found:', closeButton);
  
  if (closeButton) {
    console.log('Adding click event listener to close button...');
    closeButton.addEventListener('click', function() {
      console.log('Close button clicked!');
      closeBlock('new_quote_info');
    });
  }
  
  if (infoBlock) {
    console.log('Info block HTML:', infoBlock.outerHTML);
  }
});
</script> 