<% content_for :page_title do %>
  <%= t('products.new.title') %>
<% end %>

<% content_for :page_actions do %>
  <%= link_to products_path, class: "btn btn-outline-light me-2" do %>
    <i class="fa fa-arrow-left me-1"></i> <%= t('common.cancel') %>
  <% end %>
  <button type="button" class="btn btn-outline-light" id="save-product-button">
    <i class="fa fa-save me-1"></i> <%= t('products.form.save_product') %>
  </button>
<% end %>

<!-- Info Block -->
<% unless current_user.block_closed?('new_product_info') %>
  <div class="mb-4" id="new-product-info-block">
    <div class="green-accent-panel position-relative">
      <button type="button" class="btn btn-sm btn-outline-success position-absolute top-0 end-0 m-3" 
              id="close-new-product-info-btn" aria-label="Close" style="z-index: 10;">
        <i class="fa fa-times"></i>
      </button>
      <div class="card-body p-4">
        <div class="d-flex align-items-start">
          <div class="me-3">
            <span style="font-size: 2rem;">🧑‍🏭</span>
          </div>
          <div class="flex-grow-1">
            <h5 class="mb-3"><%= t('products.new.info.title') %></h5>
            
            <div class="mb-4">
              <h6 class="mb-2"><%= t('products.new.info.section1_title') %></h6>
              <p class="text-light-gray mb-2"><%= t('products.new.info.section1_description') %></p>
              <div class="ms-3">
                <p class="text-light-gray mb-1"><strong>📝</strong> <%= t('products.new.info.description_label') %></p>
                <p class="text-light-gray mb-1"><strong>🔢</strong> <%= t('products.new.info.quantity_label') %></p>
                <p class="text-light-gray mb-1"><strong>📐</strong> <%= t('products.new.info.dimensions_label') %></p>
                <p class="text-light-gray mb-1"><strong>↕️</strong> <%= t('products.new.info.inner_measurements_label') %></p>
                <p class="text-light-gray mb-1"><strong>💬</strong> <%= t('products.new.info.comments_label') %></p>
              </div>
            </div>
            
            <div class="mb-3">
              <h6 class="mb-2"><%= t('products.new.info.section2_title') %></h6>
              <p class="text-light-gray mb-2"><%= t('products.new.info.section2_description') %></p>
              <p class="text-light-gray mb-2"><%= t('products.new.info.section2_details') %></p>
            </div>
            
            <p class="text-light-gray mb-0"><strong>✅</strong> <%= t('products.new.info.reuse_info') %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- Vue app mount point -->
<div id="product-form-app" data-product-id="" data-translations='<%= {
  tabs: {
    general: t("products.form.tabs.general"),
    materials: t("products.form.tabs.materials"),
    processes: t("products.form.tabs.processes"),
    extras: t("products.form.tabs.extras")
  },
  general: {
    description: t("products.form.description"),
    quantity: t("products.form.quantity"),
    width: t("products.form.width"),
    length: t("products.form.length"),
    inner_measurements: t("products.form.inner_measurements"),
    comments: t("products.form.comments")
  },
  materials: {
    select_material: t("products.form.select_material"),
    add_material: t("products.form.add_material"),
    no_materials: t("products.form.no_materials"),
    description: t("products.form.material_description"),
    width: t("products.form.material_width"),
    length: t("products.form.material_length"),
    price: t("products.form.material_price"),
    pieces_per_material: t("products.form.pieces_per_material"),
    total_sheets: t("products.form.total_sheets"),
    total_square_meters: t("products.form.total_square_meters"),
    total_price: t("products.form.material_total_price"),
    actions: t("products.form.actions"),
    total: t("products.form.total"),
    remove: t("products.form.remove"),
    comments: t("products.form.materials.comments"),
    comments_placeholder: t("products.form.materials.comments_placeholder")
  },
  materials_tab: {
    comments_label: t("products.form.materials_tab.comments_label"),
    comments_placeholder: t("products.form.materials_tab.comments_placeholder")
  },
  processes: {
    process: t("processes.process"),
    select_material: t("processes.select_material"),
    select_process: t("products.form.select_process"),
    add_process: t("products.form.add_process"),
    no_processes: t("products.form.no_processes"),
    description: t("products.form.process_description"),
    unit: t("products.form.unit"),
    applied_to: t("products.form.applied_to"),
    unit_price: t("products.form.unit_price"),
    total_price: t("products.form.process_total_price"),
    actions: t("products.form.actions"),
    total: t("products.form.total"),
    remove: t("products.form.remove"),
    comments: t("products.form.process_comments"),
    comments_label: t("processes.comments_label"),
    comments_placeholder: t("processes.comments_placeholder")
  },
  extras: {
    select_extra: t("products.form.select_extra"),
    add_extra: t("products.form.add_extra"),
    no_extras: t("products.form.no_extras"),
    name: t("products.form.extra_name"),
    description: t("products.form.extra_description"),
    unit_price: t("products.form.extra_unit_price"),
    quantity: t("products.form.extra_quantity"),
    total: t("products.form.total"),
    actions: t("products.form.actions"),
    remove: t("products.form.remove"),
    include_in_subtotal: t("products.form.include_in_subtotal"),
    comments_label: t("products.form.extras_tab.comments_label"),
    comments_placeholder: t("products.form.extras_tab.comments_placeholder")
  },
  pricing: {
    materials_cost: t("products.form.materials_cost"),
    processes_cost: t("products.form.processes_cost"),
    extras_cost: t("products.form.extras_cost"),
    subtotal: t("products.form.subtotal"),
    waste: t("products.form.waste"),
    subtotal_with_waste: t("products.form.subtotal_with_waste"),
    price_per_piece_before_margin: t("products.form.price_per_piece_before_margin"),
    margin: t("products.form.margin"),
    total_price: t("products.form.total_price"),
    final_price_per_piece: t("products.form.final_price_per_piece")
  },
  materials_calculation_tooltip: t("products.form.materials_calculation_tooltip"),
  processes_calculation_tooltip: t("products.form.processes_calculation_tooltip"),
  processes_material_tooltip: t("products.form.processes_material_tooltip"),
  extras_tab: {
    select_extra: t("products.form.select_extra"),
    select_extra_placeholder: t("products.form.extras_tab.select_extra_placeholder"),
    add_extra: t("products.form.add_extra"),
    no_extras: t("products.form.no_extras"),
    name: t("products.form.extra_name"),
    description: t("products.form.extra_description"),
    unit_price: t("products.form.extra_unit_price"),
    quantity: t("products.form.extra_quantity"),
    total: t("products.form.total"),
    actions: t("products.form.actions"),
    remove: t("products.form.remove"),
    include_in_subtotal: t("products.form.include_in_subtotal"),
    include_in_subtotal_mobile: t("products.form.include_in_subtotal_mobile"),
    comments_label: t("products.form.extras_tab.comments_label"),
    comments_placeholder: t("products.form.extras_tab.comments_placeholder"),
    total_extras: t("products.form.extras_tab.total_extras"),
    table: {
      name: t("products.form.extras_tab.table.name"),
      description: t("products.form.extras_tab.table.description"),
      unit_price: t("products.form.extras_tab.table.unit_price"),
      quantity: t("products.form.extras_tab.table.quantity"),
      total: t("products.form.extras_tab.table.total"),
      actions: t("products.form.extras_tab.table.actions")
    },
    tooltips: {
      edit_price: t("products.form.extras_tab.tooltips.edit_price"),
      edit_quantity: t("products.form.extras_tab.tooltips.edit_quantity"),
      remove_extra: t("products.form.extras_tab.tooltips.remove_extra")
    }
  }
}.to_json.html_safe %>'></div>

<!-- API token for authentication -->
<%= tag.meta name: "csrf-token", content: form_authenticity_token %>

<!-- Load Vue app -->
<%= javascript_pack_tag 'product_form' %>

<script>
function closeBlock(blockName) {
  console.log('closeBlock called with:', blockName);
  
  // Get CSRF token
  const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
  console.log('CSRF Token:', csrfToken);
  
  fetch('<%= close_block_path %>', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-Token': csrfToken
    },
    body: JSON.stringify({ block_name: blockName })
  })
  .then(response => {
    console.log('Response status:', response.status);
    return response.json();
  })
  .then(data => {
    console.log('Response data:', data);
    if (data.success) {
      const blockElement = document.getElementById(blockName.replace(/_/g, '-') + '-block');
      console.log('Block element:', blockElement);
      console.log('Looking for element with ID:', blockName.replace(/_/g, '-') + '-block');
      if (blockElement) {
        console.log('Found block element, starting fade out...');
        blockElement.style.transition = 'opacity 0.3s ease-out';
        blockElement.style.opacity = '0';
        setTimeout(() => {
          blockElement.remove();
          console.log('Block element removed from DOM');
        }, 300);
      } else {
        console.error('Block element not found with ID:', blockName + '-block');
      }
    }
  })
  .catch(error => {
    console.error('Error closing block:', error);
  });
}

// Test function to verify the block exists and set up event listeners
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM loaded, setting up event listeners for new product info...');
  
  const infoBlock = document.getElementById('new-product-info-block');
  console.log('New product info block found:', infoBlock);
  
  const closeButton = document.getElementById('close-new-product-info-btn');
  console.log('Close button found:', closeButton);
  
  if (closeButton) {
    console.log('Adding click event listener to close button...');
    closeButton.addEventListener('click', function() {
      console.log('Close button clicked!');
      closeBlock('new_product_info');
    });
  }
  
  if (infoBlock) {
    console.log('Info block HTML:', infoBlock.outerHTML);
  }
});
</script> 